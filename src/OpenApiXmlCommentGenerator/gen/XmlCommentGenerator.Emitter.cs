// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using DocFx.XmlComments;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;

namespace Microsoft.AspNetCore.OpenApi.SourceGenerators;

public sealed partial class XmlCommentGenerator : IIncrementalGenerator
{
    public static string GeneratedCodeConstructor => $@"System.CodeDom.Compiler.GeneratedCodeAttribute(""{typeof(XmlCommentGenerator).Assembly.FullName}"", ""{typeof(XmlCommentGenerator).Assembly.GetName().Version}"")";
    public static string GeneratedCodeAttribute => $"[{GeneratedCodeConstructor}]";

    internal static string GenerateXmlCommentSupportSource(IEnumerable<(string, string?, XmlComment?)> cacheEntries, ImmutableArray<(AddOpenApiInvocation Source, int Index, ImmutableArray<InterceptableLocation?> Elements)> groupedAddOpenApiInvocations) => $$"""
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable

namespace System.Runtime.CompilerServices
{
    {{GeneratedCodeAttribute}}
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
    file sealed class InterceptsLocationAttribute : System.Attribute
    {
        public InterceptsLocationAttribute(int version, string data)
        {
        }
    }
}

namespace Microsoft.AspNetCore.OpenApi.Generated
{
    using DocFx.XmlComments;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Reflection;
    using System.Text.Json;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.OpenApi;
    using Microsoft.Extensions.DependencyInjection;
    using Microsoft.OpenApi.Models;
    using Microsoft.OpenApi.Any;

    file class XmlComment
    {
        public string? Summary { get; }
        public object? Example { get; }

        public XmlComment(string? summary, object? example)
        {
            Summary = summary;
            Example = example;
        }
    }

    file static class OpenApiAnyExtensions
    {
        public static IOpenApiAny ToOpenApiAny(this object? value)
        {
            if (value is null)
            {
                return new OpenApiNull();
            }
            if (value is bool boolValue)
            {
                return new OpenApiBoolean(boolValue);
            }
            if (value is int intValue)
            {
                return new OpenApiInteger(intValue);
            }
            if (value is long longValue)
            {
                return new OpenApiLong(longValue);
            }
            if (value is float floatValue)
            {
                return new OpenApiFloat(floatValue);
            }
            if (value is double doubleValue)
            {
                return new OpenApiDouble(doubleValue);
            }
            if (value is string stringValue)
            {
                return new OpenApiString(stringValue);
            }
            if (value is byte[] byteArrayValue)
            {
                return new OpenApiBinary(byteArrayValue);
            }
            if (value is System.DateTime dateTimeValue)
            {
                return new OpenApiDateTime(dateTimeValue);
            }
            if (value is System.DateTimeOffset dateTimeOffsetValue)
            {
                return new OpenApiDateTime(dateTimeOffsetValue);
            }
            if (value is System.Uri uriValue)
            {
                return new OpenApiString(uriValue.ToString());
            }
            if (value is System.Collections.IEnumerable enumerableValue)
            {
                var array = new OpenApiArray();
                foreach (var item in enumerableValue)
                {
                    array.Add(item.ToOpenApiAny());
                }
                return array;
            }
            return new OpenApiString(value.ToString());
        }
    }

    file class XmlCommentSchemaTransformer : IOpenApiSchemaTransformer
    {
        internal static readonly Dictionary<(Type, string?), XmlComment> Cache = new()
        {
{{GenerateCacheEntries(cacheEntries)}}
        };

        public Task TransformAsync(OpenApiSchema schema, OpenApiSchemaTransformerContext context, CancellationToken cancellationToken)
        {
            if (context.JsonPropertyInfo is { AttributeProvider: PropertyInfo propertyInfo })
            {
                if (Cache.TryGetValue((propertyInfo.DeclaringType, propertyInfo.Name), out var propertyComment))
                {
                    schema.Description = propertyComment.Summary;
                    if (propertyComment.Example is not null)
                    {
                        schema.Example = propertyComment.Example.ToOpenApiAny();
                    }
                }
            }
            if (Cache.TryGetValue((context.JsonTypeInfo.Type, null), out var typeComment))
            {
                schema.Description = typeComment.Summary;
                if (schema.Example is not null)
                {
                    schema.Example = typeComment.Example.ToOpenApiAny();
                }
            }
            return Task.CompletedTask;
        }
    }

    file static class GeneratedServiceCollectionExtensions
    {
{{GenerateAddOpenApiInterceptions(groupedAddOpenApiInvocations)}}
    }
}
""";

    internal static string GetAddOpenApiInterceptor(AddOpenApiOverloadVariant overloadVariant) => overloadVariant switch
    {
        AddOpenApiOverloadVariant.AddOpenApi => """
        public static IServiceCollection AddOpenApi(this IServiceCollection services)
                {
                    return services.AddOpenApi("v1", options =>
                    {
                        options.AddSchemaTransformer(new XmlCommentSchemaTransformer());
                    });
                }
        """,
        AddOpenApiOverloadVariant.AddOpenApiDocumentName => """
        public static IServiceCollection AddOpenApi(this IServiceCollection services, string documentName)
                {
                    return services.AddOpenApi(documentName, options =>
                    {
                        options.AddSchemaTransformer(new XmlCommentSchemaTransformer());
                    });
                }
        """,
        AddOpenApiOverloadVariant.AddOpenApiDocumentNameConfigureOptions => """
        public static IServiceCollection AddOpenApi(this IServiceCollection services, string documentName, Action<OpenApiOptions> configureOptions)
                {
                    // This overload is not intercepted.
                    return OpenApiServiceCollectionExtensions.AddOpenApi(services, documentName, options =>
                    {
                        configureOptions(options);
                        options.AddSchemaTransformer(new XmlCommentTransformer());
                    });
                }
        """,
        _ => throw new InvalidOperationException("Invalid overload variant for `AddOpenApi`.")
    };

    internal static string GenerateAddOpenApiInterceptions(ImmutableArray<(AddOpenApiInvocation Source, int Index, ImmutableArray<InterceptableLocation?> Elements)> groupedAddOpenApiInvocations)
    {
        var writer = new StringWriter();
        var codeWriter = new CodeWriter(writer, baseIndent: 2);
        foreach (var (source, _, locations) in groupedAddOpenApiInvocations)
        {
            foreach (var location in locations)
            {
                if (location is not null)
                {
                    codeWriter.WriteLine(location.GetInterceptsLocationAttributeSyntax());
                }
            }
            codeWriter.WriteLine(GetAddOpenApiInterceptor(source.Variant));
        }
        return writer.ToString();
    }

    internal static string GenerateCacheEntries(IEnumerable<(string, string?, XmlComment?)> cacheEntries)
    {
        var writer = new StringWriter();
        var codeWriter = new CodeWriter(writer, baseIndent: 3);
        foreach (var (type, member, comment) in cacheEntries)
        {
            if (comment is not null)
            {
                var typeKey = $"(typeof({type})";
                var memberKey = member is not null ? $"nameof({type}.{member})" : "null";
                codeWriter.WriteLine($"{{ {typeKey}, {memberKey}), new XmlComment({(comment.Summary is not null ? SymbolDisplay.FormatLiteral(comment.Summary, true) : "null")}, {(comment.Examples.FirstOrDefault() is { } example ? SymbolDisplay.FormatLiteral(example, true) : "null")}) }},");
            }
        }
        return writer.ToString();
    }

    internal static void EmitXmlCommentCache(SourceProductionContext context, IEnumerable<(string, string?, XmlComment?)> comments, ImmutableArray<(AddOpenApiInvocation Source, int Index, ImmutableArray<InterceptableLocation?> Elements)> groupedAddOpenApiInvocations)
    {
        context.AddSource("OpenApiXmlCommentSupport.generated.cs", GenerateXmlCommentSupportSource(comments, groupedAddOpenApiInvocations));
    }
}
