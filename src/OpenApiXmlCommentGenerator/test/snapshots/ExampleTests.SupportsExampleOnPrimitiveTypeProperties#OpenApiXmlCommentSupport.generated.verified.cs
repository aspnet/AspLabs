//HintName: OpenApiXmlCommentSupport.generated.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable

namespace System.Runtime.CompilerServices
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.AspNetCore.OpenApi.SourceGenerators, Version=42.42.42.42, Culture=neutral, PublicKeyToken=adb9793829ddae60", "42.42.42.42")]
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
    file sealed class InterceptsLocationAttribute : System.Attribute
    {
        public InterceptsLocationAttribute(int version, string data)
        {
        }
    }
}

namespace Microsoft.AspNetCore.OpenApi.Generated
{
    using DocFx.XmlComments;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Reflection;
    using System.Text.Json;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.OpenApi;
    using Microsoft.AspNetCore.Mvc.Controllers;
    using Microsoft.Extensions.DependencyInjection;
    using Microsoft.OpenApi.Models;
    using Microsoft.OpenApi.Any;

    file class XmlComment
    {
        public string? Summary { get; set; }
        public string? Description { get; set; }
        public string? Returns { get; set; }
        public IOpenApiAny? Example { get; set; }
    }

    file static class XmlCommentCache
    {
        private static Dictionary<(Type?, string?), XmlComment>? _cache;
        public static Dictionary<(Type?, string?), XmlComment> Cache
        {
            get
            {
                if (_cache is null)
                {
                    _cache = GenerateCacheEntries();
                }
                return _cache;
            }
        }

        private static Dictionary<(Type?, string?), XmlComment> GenerateCacheEntries()
        {
            var _cache = new Dictionary<(Type?, string?), XmlComment>();
            XmlComment xmlComment;
            xmlComment = new XmlComment();
            xmlComment.Example = new OpenApiBoolean(true);
            _cache.Add((typeof(global::TypeWithExamples), nameof(global::TypeWithExamples.BooleanType)), xmlComment);
            xmlComment = new XmlComment();
            xmlComment.Example = new OpenApiInteger(42);
            _cache.Add((typeof(global::TypeWithExamples), nameof(global::TypeWithExamples.IntegerType)), xmlComment);
            xmlComment = new XmlComment();
            xmlComment.Example = new OpenApiLong(1234567890123456789);
            _cache.Add((typeof(global::TypeWithExamples), nameof(global::TypeWithExamples.LongType)), xmlComment);
            xmlComment = new XmlComment();
            xmlComment.Example = new OpenApiDouble(3.14);
            _cache.Add((typeof(global::TypeWithExamples), nameof(global::TypeWithExamples.DoubleType)), xmlComment);
            xmlComment = new XmlComment();
            xmlComment.Example = new OpenApiFloat(3.14f);
            _cache.Add((typeof(global::TypeWithExamples), nameof(global::TypeWithExamples.FloatType)), xmlComment);
            xmlComment = new XmlComment();
            xmlComment.Example = new OpenApiDateTime(System.DateTime.Parse("2022-01-01T00:00:00Z"));
            _cache.Add((typeof(global::TypeWithExamples), nameof(global::TypeWithExamples.DateTimeType)), xmlComment);
            xmlComment = new XmlComment();
            xmlComment.Example = new OpenApiDateTime(System.DateTimeOffset.Parse("2022-01-01T00:00:00Z"));
            _cache.Add((typeof(global::TypeWithExamples), nameof(global::TypeWithExamples.DateTimeOffsetType)), xmlComment);
            xmlComment = new XmlComment();
            xmlComment.Example = new OpenApiObject(2022-01-01T00:00:00Z);
            _cache.Add((typeof(global::TypeWithExamples), nameof(global::TypeWithExamples.TimeSpanType)), xmlComment);
            xmlComment = new XmlComment();
            xmlComment.Example = new OpenApiNull();
            _cache.Add((typeof(global::TypeWithExamples), nameof(global::TypeWithExamples.ByteArrayType)), xmlComment);
            xmlComment = new XmlComment();
            xmlComment.Example = new OpenApiObject({ "a" : 1, "b": 3.14, "c": "hello" });
            _cache.Add((typeof(global::TypeWithExamples), nameof(global::TypeWithExamples.ObjectType)), xmlComment);
            return _cache;

        }
    }

    file class XmlCommentOperationTransformer : IOpenApiOperationTransformer
    {
        public Task TransformAsync(OpenApiOperation operation, OpenApiOperationTransformerContext context, CancellationToken cancellationToken)
        {
            System.Diagnostics.Debugger.Break();
            if (context.Description.ActionDescriptor is ControllerActionDescriptor controllerActionDescriptor)
            {
                if (XmlCommentCache.Cache.TryGetValue((controllerActionDescriptor.MethodInfo.DeclaringType, controllerActionDescriptor.MethodInfo.Name), out var methodComment))
                {
                    operation.Summary = methodComment.Summary;
                    operation.Description = methodComment.Description;
                }
            }

            var methodInfo = context.Description.ActionDescriptor.EndpointMetadata.OfType<MethodInfo>().SingleOrDefault();
            if (methodInfo is not null)
            {
                if (XmlCommentCache.Cache.TryGetValue((methodInfo.DeclaringType, methodInfo.Name), out var methodComment))
                {
                    operation.Summary = methodComment.Summary;
                    operation.Description = methodComment.Description;
                }
            }
            return Task.CompletedTask;
        }
    }

    file class XmlCommentSchemaTransformer : IOpenApiSchemaTransformer
    {
        public Task TransformAsync(OpenApiSchema schema, OpenApiSchemaTransformerContext context, CancellationToken cancellationToken)
        {
            if (context.JsonPropertyInfo is { AttributeProvider: PropertyInfo propertyInfo })
            {
                if (XmlCommentCache.Cache.TryGetValue((propertyInfo.DeclaringType, propertyInfo.Name), out var propertyComment))
                {
                    schema.Description = propertyComment.Returns ?? propertyComment.Summary;
                    if (propertyComment.Example is not null)
                    {
                        schema.Example = propertyComment.Example;
                    }
                }
            }
            if (XmlCommentCache.Cache.TryGetValue((context.JsonTypeInfo.Type, null), out var typeComment))
            {
                schema.Description = typeComment.Summary;
                if (schema.Example is not null)
                {
                    schema.Example = typeComment.Example;
                }
            }
            return Task.CompletedTask;
        }
    }

    file static class GeneratedServiceCollectionExtensions
    {
        [global::System.Runtime.CompilerServices.InterceptsLocationAttribute(1, "eJzRaTG3vikAwy56pPYxCqMAAABQcm9ncmFtLmNz")]
        public static IServiceCollection AddOpenApi(this IServiceCollection services)
        {
            return services.AddOpenApi("v1", options =>
            {
                options.AddSchemaTransformer(new XmlCommentSchemaTransformer());
                options.AddOperationTransformer(new XmlCommentOperationTransformer());
            });
        }

    }
}