//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable

namespace System.Runtime.CompilerServices
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.AspNetCore.OpenApi.SourceGenerators, Version=42.42.42.42, Culture=neutral, PublicKeyToken=adb9793829ddae60", "42.42.42.42")]
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
    file sealed class InterceptsLocationAttribute : System.Attribute
    {
        public InterceptsLocationAttribute(int version, string data)
        {
        }
    }
}

namespace Microsoft.AspNetCore.OpenApi.Generated
{
    using DocFx.XmlComments;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Reflection;
    using System.Text.Json;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.OpenApi;
    using Microsoft.Extensions.DependencyInjection;
    using Microsoft.OpenApi.Models;
    using Microsoft.OpenApi.Any;

    file class XmlComment
    {
        public string? Summary { get; }
        public object? Example { get; }

        public XmlComment(string? summary, object? example)
        {
            Summary = summary;
            Example = example;
        }
    }

    file static class OpenApiAnyExtensions
    {
        public static IOpenApiAny ToOpenApiAny(this object? value)
        {
            if (value is null)
            {
                return new OpenApiNull();
            }
            if (value is bool boolValue)
            {
                return new OpenApiBoolean(boolValue);
            }
            if (value is int intValue)
            {
                return new OpenApiInteger(intValue);
            }
            if (value is long longValue)
            {
                return new OpenApiLong(longValue);
            }
            if (value is float floatValue)
            {
                return new OpenApiFloat(floatValue);
            }
            if (value is double doubleValue)
            {
                return new OpenApiDouble(doubleValue);
            }
            if (value is string stringValue)
            {
                return new OpenApiString(stringValue);
            }
            if (value is byte[] byteArrayValue)
            {
                return new OpenApiBinary(byteArrayValue);
            }
            if (value is System.DateTime dateTimeValue)
            {
                return new OpenApiDateTime(dateTimeValue);
            }
            if (value is System.DateTimeOffset dateTimeOffsetValue)
            {
                return new OpenApiDateTime(dateTimeOffsetValue);
            }
            if (value is System.Uri uriValue)
            {
                return new OpenApiString(uriValue.ToString());
            }
            if (value is System.Collections.IEnumerable enumerableValue)
            {
                var array = new OpenApiArray();
                foreach (var item in enumerableValue)
                {
                    array.Add(item.ToOpenApiAny());
                }
                return array;
            }
            return new OpenApiString(value.ToString());
        }
    }

    file class XmlCommentSchemaTransformer : IOpenApiSchemaTransformer
    {
        internal static readonly Dictionary<(Type, string?), XmlComment> Cache = new()
        {
            { (typeof(global::Todo), null), new XmlComment("Represents a todo item that can be created, read, updated, and deleted.", null) },
            { (typeof(global::Todo), nameof(global::Todo.Title)), new XmlComment("The main title of the todo.", null) },
            { (typeof(global::Todo), nameof(global::Todo.Completed)), new XmlComment("Whether or not the todo has been completed.", null) },

        };

        public Task TransformAsync(OpenApiSchema schema, OpenApiSchemaTransformerContext context, CancellationToken cancellationToken)
        {
            if (context.JsonPropertyInfo is { AttributeProvider: PropertyInfo propertyInfo })
            {
                if (Cache.TryGetValue((context.JsonTypeInfo.Type, propertyInfo.Name), out var propertyComment))
                {
                    schema.Description = propertyComment.Summary;
                    if (propertyComment.Example is not null)
                    {
                        schema.Example = propertyComment.Example.ToOpenApiAny();
                    }
                }
            }
            if (Cache.TryGetValue((context.JsonTypeInfo.Type, null), out var typeComment))
            {
                schema.Description = typeComment.Summary;
                if (schema.Example is not null)
                {
                    schema.Example = typeComment.Example.ToOpenApiAny();
                }
            }
            return Task.CompletedTask;
        }
    }

    file static class GeneratedServiceCollectionExtensions
    {
        [global::System.Runtime.CompilerServices.InterceptsLocationAttribute(1, "IBhMo+uT6/NDBs3pn6tE4UQAAABQcm9ncmFtLmNz")]
        public static IServiceCollection AddOpenApi(this IServiceCollection services)
        {
            return services.AddOpenApi("v1", options =>
            {
                options.AddSchemaTransformer(new XmlCommentSchemaTransformer());
            });
        }

    }
}