variables:
  - name: Build.Repository.Clean
    value: true
  - name: _TeamName
    value: AspNetCore
  - name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE
    value: true
  - name: _HelixType
    value: build/product

  # Variables for public PR builds
  - ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
    - name: _HelixSource
      value: pr/aspnet/AspLabs/$(Build.SourceBranch)
    # These are needed to suppress a warning in the cibuild invocation since AzDO leaves the `$(_SignArgs)` in place and it fails to resolve.
    - name: _SignArgs
      value: ''
    - name: _OfficialBuildIdArgs
      value: ''

  # Variables for internal Official builds
  - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
    - name: _HelixSource
      value: official/aspnet/AspLabs/$(Build.SourceBranch)
    - name: _SignType
      value: real
    - name: _SignArgs
      value: /p:DotNetSignType=$(_SignType) /p:TeamName=$(_TeamName)
    - name: _OfficialBuildIdArgs
      value: /p:OfficialBuildId=$(Build.BuildNumber)

resources:
  containers:
  - container: LinuxContainer
    image: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-14.04-cross-0cd4667-20170319080304
    options: --init # This ensures all the stray defunct processes are reaped.

trigger:
- master

pr:
- "*"

jobs:
- template: /eng/common/templates/jobs/jobs.yml
  parameters:
    enablePublishBuildArtifacts: true
    enablePublishTestResults: true
    enablePublishBuildAssets: true
    enableTelemetry: true
    helixRepo: aspnet/AspLabs
    # enableMicrobuild can't be read from a user-defined variable (Azure DevOps limitation)
    ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
      enableMicrobuild: true
    jobs:
    - job: Windows
      pool:
        ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
          name: NetCorePublic-Int-Pool
          queue: BuildPool.Windows.10.Amd64.VS2017.Open
        ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
          name: NetCoreInternal-Int-Pool
          queue: BuildPool.Windows.10.Amd64.VS2017
      variables:
      - name: _HelixBuildConfig
        value: $(_BuildConfig)
      strategy:
        matrix:
          ${{ if in(variables['Build.Reason'], 'PullRequest') }}:
            Debug:
              _BuildConfig: Debug
              _SignType: test
              _DotNetPublishToBlobFeed: false
              _BuildArgs:
          Release:
            _BuildConfig: Release
            # PRs and external builds are not signed.
            ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
              _SignType: test
              _DotNetPublishToBlobFeed: false
              _BuildArgs:
            ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
              _SignType: real
              _DotNetPublishToBlobFeed: true
              _BuildArgs: $(SignArgs) $(_OfficialBuildIdArgs)
      steps:
      - checkout: self
        clean: true
      - task: NodeTool@0
        inputs:
          versionSpec: '10.x'
      - script: eng\common\cibuild.cmd
          -configuration $(_BuildConfig)
          -prepareMachine
          $(_BuildArgs)
        name: Build
        displayName: Build
        condition: succeeded()
      - task: PublishTestResults@2
        displayName: Publish xUnit Test Results
        condition: always()
        continueOnError: true
        inputs:
          testRunner: xunit
          testResultsFiles: 'artifacts/TestResults/$(_BuildConfig)/*.xml'
      - task: PublishBuildArtifacts@1
        displayName: Publish Packages
        condition: and(eq(variables['system.pullrequest.isfork'], false), eq(variables['_BuildConfig'], 'Release'))
        continueOnError: true
        inputs:
          artifactName: Packages_$(Agent.Os)_$(Agent.JobName)
          parallel: true
          pathtoPublish: '$(Build.SourcesDirectory)/artifacts/packages/$(_BuildConfig)'
          publishLocation: Container
      - task: PublishBuildArtifacts@1
        displayName: Publish Logs
        condition: always()
        continueOnError: true
        inputs:
          artifactName: Logs_$(Agent.Os)_$(Agent.JobName)
          parallel: true
          pathtoPublish: '$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)'
          publishLocation: Container

    - job: macOS
      pool:
        vmImage: macOS-10.13
      strategy:
        matrix:
          debug:
            _BuildConfig: Debug
          release:
            _BuildConfig: Release
      variables:
      - name: _HelixBuildConfig
        value: $(_BuildConfig)
      steps:
      - checkout: self
        clean: true
      - script: eng/common/cibuild.sh
          --configuration $(_BuildConfig)
          --prepareMachine
        name: Build
        displayName: Build
        condition: succeeded()
      - task: PublishTestResults@2
        displayName: Publish xUnit Test Results
        condition: always()
        continueOnError: true
        inputs:
          testRunner: xunit
          testResultsFiles: 'artifacts/TestResults/$(_BuildConfig)/*.xml'
      - task: PublishBuildArtifacts@1
        displayName: Publish Logs
        condition: always()
        continueOnError: true
        inputs:
          artifactName: Logs_$(Agent.Os)_$(Agent.JobName)
          parallel: true
          pathtoPublish: '$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)'
          publishLocation: Container

    - job: Linux
      pool:
        vmImage: ubuntu-16.04
        container: LinuxContainer
      strategy:
        matrix:
          debug:
            _BuildConfig: Debug
          release:
            _BuildConfig: Release
      variables:
      - name: _HelixBuildConfig
        value: $(_BuildConfig)
      steps:
      - checkout: self
        clean: true
      - script: eng/common/cibuild.sh
          --configuration $(_BuildConfig)
          --prepareMachine
        name: Build
        displayName: Build
        condition: succeeded()
      - task: PublishTestResults@2
        displayName: Publish xUnit Test Results
        condition: always()
        continueOnError: true
        inputs:
          testRunner: xunit
          testResultsFiles: 'artifacts/TestResults/$(_BuildConfig)/*.xml'
      - task: PublishBuildArtifacts@1
        displayName: Publish Logs
        condition: always()
        continueOnError: true
        inputs:
          artifactName: Logs_$(Agent.Os)_$(Agent.JobName)
          parallel: true
          pathtoPublish: '$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)'
          publishLocation: Container
